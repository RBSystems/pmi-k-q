/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics, Inc.
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BSS SoundWeb London Analog Telephone Card Drive v5.4"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE 
//#ANALOG_SERIAL_EXPAND AllWITHANY
#DIGITAL_EXPAND InputsWithOutputs 
#HELP_PDF_FILE "bss soundweb london telephone hybrid card help.pdf"
#ENABLE_STACK_CHECKING
  
#HELP_BEGIN
	version 5.4
	For use inside the BSS SoundWeb London Analog Telephone Card v5.4 module only.
#HELP_END
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _skip_, _skip_,_skip_, subscribe$;
DIGITAL_INPUT unSubscribe$;
DIGITAL_INPUT meter_subscribe$; 

// buttons 0-9
DIGITAL_INPUT _skip_, Button_1$;
DIGITAL_INPUT Button_2$; 
DIGITAL_INPUT Button_3$;
DIGITAL_INPUT Button_4$;
DIGITAL_INPUT Button_5$;
DIGITAL_INPUT Button_6$;
DIGITAL_INPUT Button_7$;
DIGITAL_INPUT Button_8$;
DIGITAL_INPUT Button_9$;
DIGITAL_INPUT Button_0$;
DIGITAL_INPUT Button_pause$;
DIGITAL_INPUT Button_delete$;
DIGITAL_INPUT Button_redial$;
DIGITAL_INPUT Button_international_plus$;
DIGITAL_INPUT Button_backspace$;
DIGITAL_INPUT Button_flash$;
DIGITAL_INPUT Button_#$;
DIGITAL_INPUT Button_asterisk$;

DIGITAL_INPUT _skip_, Hang_Up$;
DIGITAL_INPUT Dial$;
DIGITAL_INPUT toggle_Dial_Hang_Up$;
 
DIGITAL_INPUT _skip_,Tx_muteOn$;
DIGITAL_INPUT Tx_muteOff$;
DIGITAL_INPUT Tx_muteToggle$;
DIGITAL_INPUT _skip_,Rx_muteOn$;
DIGITAL_INPUT Rx_muteOff$;
DIGITAL_INPUT Rx_muteToggle$;

DIGITAL_INPUT _skip_,speed_Store$[16];
DIGITAL_INPUT _skip_,speed_Dial$[16];

ANALOG_INPUT _skip_,auto_answer$; 
ANALOG_INPUT _skip_,Tx_gain$;    
ANALOG_INPUT _skip_,_skip_,Rx_gain$;
ANALOG_INPUT _skip_,_skip_,DTMF_gain$;
ANALOG_INPUT _skip_,Dial_tone_gain$;
ANALOG_INPUT _skip_,Ring_gain$;
  
BUFFER_INPUT _skip_, rx$[4000];

DIGITAL_OUTPUT _skip_,_skip_,_skip_,Incoming_Call_FB$;
DIGITAL_OUTPUT _skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,hook_Status_fb$; 
DIGITAL_OUTPUT _skip_,_skip_,_skip_,Tx_mute_fb$;
DIGITAL_OUTPUT _skip_,_skip_,_skip_,Rx_mute_fb$;
DIGITAL_OUTPUT _skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,speed_Dial_fb$[16];

ANALOG_OUTPUT _skip_,auto_answer_fb$; 
ANALOG_OUTPUT _skip_,Tx_gain_fb$;        
ANALOG_OUTPUT Tx_meter_fb$;
ANALOG_OUTPUT _skip_,Rx_gain_fb$;
ANALOG_OUTPUT Rx_meter_fb$;
ANALOG_OUTPUT _skip_,DTMF_gain_fb$;
ANALOG_OUTPUT _skip_,Dial_tone_gain_fb$;
ANALOG_OUTPUT _skip_,Ring_gain_fb$; 

STRING_OUTPUT _skip_, tx$;

STRING_OUTPUT _skip_,Phone_number_fb$;
/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/  
// TODO Need AutoAnswer, and a Metersubscribe dropdown box
INTEGER_PARAMETER meter_Rate$; 
STRING_PARAMETER Card$[3];
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
//STRING_PARAMETER 
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/ 
#BEGIN_PARAMETER_PROPERTIES meter_Rate$
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 50d , 2000d;
   propDefaultValue = 2000d; 
   //propList = {0d,0},{1d,1};
   #BEGIN_PROP_FULL_DESCRIPTION  
    "See Help File"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Card$
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "\x00\x00\x01"; 
   propList = {"\x00\x00\x01","A"},{"\x00\x00\x02","B"},{"\x00\x00\x03","C"},{"\x00\x00\x04","D"};  
   #BEGIN_PROP_FULL_DESCRIPTION  
    "See Help File"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER iTempNum, iMarker1;
STRING tempString[40], sTempSend[100], sCard[10];

STRING returnString[4];

INTEGER returnI,subscribe,xOKSubscribe,meter_subscribe;   

INTEGER i, xSave, xDial, stateVarValue, stateVarPhantom, stateVarReceive,stateVarSave,stateVarDial;
INTEGER volumeInput,volume; 

INTEGER Tx_gain,xOKTx_gain;    
INTEGER Rx_gain,xOKRx_gain;
INTEGER DTMF_gain,xOKDTMF_gain;
INTEGER Dial_tone_gain,xOKDial_tone_gain;
INTEGER Ring_gain,xOKRing_gain;

INTEGER mainRec1,mainRec2,mainRec3;
STRING mainStr1[32],mainStr2[32],mainStr3[32], sNode[6];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
String_Function send(STRING str1)
{        
	INTEGER checksum;
	STRING fsTempReturn[100], sendString[100];
	
	checksum = 0;
	sendString = "";
	for (i = 1 to len(str1))                                                               
	{             
		checksum = checksum ^ byte(str1, i);
		if (byte(str1, i) = 2 || byte(str1, i) = 3 || byte(str1, i) = 6 || byte(str1, i) = 21 || byte(str1, i) = 27)
		{     
			makeString(sendString, "%s\x1B%s", sendString, chr(byte(str1, i) + 128));
		}               
		else
		{
			makeString(sendString, "%s%s", sendString, chr(byte(str1, i)));
		}
	}                  
	if (checksum = 2 || checksum = 3 || checksum = 6 || checksum = 21 || checksum = 27)
	{
		makeString(fsTempReturn, "\x02%s\x1B%s\x03", sendString, chr(checksum+128));
	}
	else
	{                                      
		makeString(fsTempReturn, "\x02%s%s\x03", sendString, chr(checksum));
	}
	return(fsTempReturn);
}

String_Function iToVolumePercent(INTEGER int)
{                 
	// number from 0 - 65535  
	volume = (int*100)/65535;
	returnString = "\x00" + chr(volume) + "\x00\x00";
    Return (returnString);
}

Integer_Function volumePercentToI(STRING str)
{   
	INTEGER fraction;                      
	fraction = byte(str,3)*256+byte(str,4);
	if(fraction > 32767)
	{
		volume = ((byte(str, 2)+1)*65535)/100;                  
	}
	else
	{
		volume = (byte(str, 2)*65535)/100;
	}
	returnI = volume;

    Return (returnI);
}      

Integer_Function wordToI(STRING sSourceString, Integer iHighByte, Integer iLowByte)//will take string and return integer Word
{
 	INTEGER iWord;

	if((byte(sSourceString,iHighByte) <> 65535) && byte(sSourceString,iLowByte) <> 65535)//error check
	{
		iWord = (byte(sSourceString,iHighByte)*256)+byte(sSourceString,iLowByte);
	}
	else
	{
		iWord = 65535;
	}
	
	Return (iWord);
} 

String_function byteToString(integer convert)
{
	String number[1];
	number = "";
	cswitch(convert)
	{
		case(0): // 0 
		{
			number = "0";
			break;
		}
		case(1):
		{
			number = "1";
			break;
		}
		case(2):
		{
			number = "2";
			break;
		}
		case(3):
		{
			number = "3";
			break;
		}
		case(4):
		{ 
			number = "4";
			break;
		}
		case(5):
		{ 
			number = "5";
			break;
		}
		case(6):
		{ 
			number = "6";
			break;
		}
		case(7):
		{ 
			number = "7";
			break;
		}
		case(8):
		{ 
			number = "8";
			break;
		}
		case(9):
		{ 
			number = "9";
			break;
		}
		case(10):
		{
			number = "#";
			break;
		}
		case(11):
		{
			number = "*";
			break;
		}
		case(12):
		{
			number = ",";
			break;
		}
		case(13):
		{
			number = "+";
			break;
		}
		case(14):
		{
			number = "";
			break;
		}
		case(15):
		{
			number = "";
			break;
		}
	}
	return (number);
}

String_function bytesToString(integer intHigh,integer intLow)
{  
	integer mask;
	String number[8];
	mask = 15; //000f

	makeString(number,"%s%s%s%s%s%s%s%s",byteToString((intHigh}}12) & mask),byteToString((intHigh}}8) & mask),byteToString((intHigh}}4) & mask),byteToString(intHigh & mask),byteToString((intLow}}12) & mask),byteToString((intLow}}8) & mask),byteToString((intLow}}4) & mask),byteToString(intLow & mask));
	return (number);
}

String_Function fPad(STRING fsPad)
{
	INTEGER fiA;
	
	STRING fsReturn[10];
	
	fsReturn = "";
	for(fiA = 1 to len(fsPad))
	{
		if (byte(fsPad, fiA) = 2 || byte(fsPad, fiA) = 3 || byte(fsPad, fiA) = 6 || byte(fsPad, fiA) = 21 || byte(fsPad, fiA) = 27)
		{     
			makeString(fsReturn, "%s\x1B%s", fsReturn, chr(byte(fsPad, fiA) + 128));
		}               
		else
		{
			makeString(fsReturn, "%s%s", fsReturn, chr(byte(fsPad, fiA)));
		}
	}
	return(fsReturn);
}

String_Function fUnpad(STRING str2)
{
	INTEGER j;
	STRING receiveString[100];
	
	receiveString = "";
	for (j = 1 to len(str2))
	{
		if (byte(str2, j) = 27)
		{
			receiveString = receiveString + chr(byte(str2, j+1)-128);	
			j = j+1;
		} 
		else
		{
			receiveString = receiveString + chr(byte(str2, j));
		}
	}    
	while (byte(receiveString, 1) = 6)
	{
		receiveString = right(receiveString, len(receiveString)-1);
	}
	return (receiveString);
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH subscribe$
{    
//	if(unSubscribe$)
//				print("ERROR the subscribe and unSubscribe signals should never be set high at the same time or serious errors can occur");
	wait(20)
	{           
        if(xOKSubscribe)
        {
       		xOKSubscribe = 0;
			makeString(sTempSend, "\x89%s\x03%s\x00\x67\x00\x00\x00\x00", sNode, Card$);//main number
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
       		processlogic();
			makeString(sTempSend, "\x89%s\x03%s\x00\x66\x00\x00\x00\x00", sNode, Card$);//main number
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
			makeString(sTempSend, "\x89%s\x03%s\x00\x65\x00\x00\x00\x00", sNode, Card$);//main number
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
			makeString(sTempSend, "\x89%s\x03%s\x00\x64\x00\x00\x00\x00", sNode, Card$);//main number
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic(); 
			makeString(sTempSend, "\x89%s\x03%s\x00\x8C\x00\x00\x00\x00", sNode, Card$);//Tx mute
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();                                                                                       
			makeString(sTempSend, "\x89%s\x03%s\x00\x8F\x00\x00\x00\x00", sNode, Card$);//Rx mute
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();                                                                                       
			makeString(sTempSend, "\x89%s\x03%s\x00\x7A\x00\x00\x00\x00", sNode, Card$);//incoming call
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();                                                                                              
			makeString(sTempSend, "\x89%s\x03%s\x00\x7C\x00\x00\x00\x00", sNode, Card$);//auto_answer
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic(); 
			makeString(sTempSend, "\x89%s\x03%s\x00\x7E\x00\x00\x00\x00", sNode, Card$);//hook
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
			makeString(sTempSend, "\x8E%s\x03%s\x00\x8D\x00\x00\x00\x00", sNode, Card$);//Tx gain
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
			makeString(sTempSend, "\x8E%s\x03%s\x00\x90\x00\x00\x00\x00", sNode, Card$);//Rx gain
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();                                                                                 
			makeString(sTempSend, "\x8E%s\x03%s\x00\x92\x00\x00\x00\x00", sNode, Card$);//DTMF gain
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
			makeString(sTempSend, "\x8E%s\x03%s\x00\x94\x00\x00\x00\x00", sNode, Card$);//Dial tone gain
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
			makeString(sTempSend, "\x8E%s\x03%s\x00\x93\x00\x00\x00\x00", sNode, Card$);//Ring gain
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
			subscribe = 1;
			xOKSubscribe = 1;
		}
/*		else
		{
			print("Subscribtions were not sent for the telephone input card please try again");
		}*/
	}                        
}  

PUSH unSubscribe$
{    
//	if(Subscribe$)
//		print("ERROR the subscribe and unSubscribe signals should never be set high at the same time or serious errors can occur");
	if(xOKSubscribe)
	{
		xOKSubscribe = 0;
        makeString(sTempSend, "\x8A%s\x03%s\x00\x67\x00\x00\x00\x00", sNode, Card$);//main number
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
      	processlogic();
		makeString(sTempSend, "\x8A%s\x03%s\x00\x66\x00\x00\x00\x00", sNode, Card$);//main number
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
		makeString(sTempSend, "\x8A%s\x03%s\x00\x65\x00\x00\x00\x00", sNode, Card$);//main number
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
		makeString(sTempSend, "\x8A%s\x03%s\x00\x64\x00\x00\x00\x00", sNode, Card$);//main number
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
		makeString(sTempSend, "\x8A%s\x03%s\x00\x8C\x00\x00\x00\x00", sNode, Card$);//Tx mute
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();                                                                                       
		makeString(sTempSend, "\x8A%s\x03%s\x00\x8F\x00\x00\x00\x00", sNode, Card$);//Rx mute
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();                                                                                       
		makeString(sTempSend, "\x8A%s\x03%s\x00\x7A\x00\x00\x00\x00", sNode, Card$);//incoming call
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();                                                                                              
		makeString(sTempSend, "\x8A%s\x03%s\x00\x7C\x00\x00\x00\x00", sNode, Card$);//auto_answer
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
		makeString(sTempSend, "\x8A%s\x03%s\x00\x7E\x00\x00\x00\x00", sNode, Card$);//hook
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
		makeString(sTempSend, "\x8F%s\x03%s\x00\x8D\x00\x00\x00\x00", sNode, Card$);//Tx gain
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
		makeString(sTempSend, "\x8F%s\x03%s\x00\x90\x00\x00\x00\x00", sNode, Card$);//Rx gain
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();                                                                                 
		makeString(sTempSend, "\x8F%s\x03%s\x00\x92\x00\x00\x00\x00", sNode, Card$);//DTMF gain
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();                                                                                    
		makeString(sTempSend, "\x8F%s\x03%s\x00\x94\x00\x00\x00\x00", sNode, Card$);//Dial tone gain
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();                                                                                         
		makeString(sTempSend, "\x8F%s\x03%s\x00\x93\x00\x00\x00\x00", sNode, Card$);//Ring gain
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();                                                                                    
		subscribe = 0;
		xOKSubscribe = 1;
	}
}

PUSH meter_subscribe$
{      	
	wait(20)
	{                                                                                                                                    
		makeString(sTempSend, "\x8E%s\x03%s\x00\x8E\x00\x00%s%s", sNode, Card$, chr(high(meter_Rate$)), chr(low(meter_Rate$)));  //METER 
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
		makeString(sTempSend, "\x8E%s\x03%s\x00\x91\x00\x00%s%s", sNode, Card$, chr(high(meter_Rate$)), chr(low(meter_Rate$)));  //METER 
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();		
	
		meter_subscribe = meter_subscribe$;
	}
}

RELEASE meter_subscribe$
{
	makeString(sTempSend, "\x8F%s\x03%s\x00\x8E\x00\x00%s%s", sNode, Card$, chr(high(meter_Rate$)), chr(low(meter_Rate$)));  //METER 
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	processlogic();
	makeString(sTempSend, "\x8F%s\x03%s\x00\x91\x00\x00%s%s", sNode, Card$, chr(high(meter_Rate$)), chr(low(meter_Rate$)));  //METER  
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	processlogic();			

meter_subscribe = meter_subscribe$;

}


CHANGE auto_answer$
{
	if(auto_answer$ < 0 || auto_answer$ > 10)
	{
	 	// the is an error 
//	 	print ("error auto_answer for the telephone input card must be between 0-10.");
	}
	else
	{
		makeString(sTempSend, "\x88%s\x03%s\x00\x7C\x00\x00\x00%s", sNode, Card$, chr(auto_answer$));
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		if(subscribe)
		{     
			makeString(sTempSend, "\x89%s\x03%s\x00\x7C\x00\x00\x00\x00", sNode, Card$);//get auto_answer feedback
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
		} 	
	}
}
CHANGE Tx_gain$
{    
	if(Tx_gain$ <> Tx_gain)
	{   
		if(xOKTx_gain)
		{
			xOKTx_gain = 0;
			Tx_gain = Tx_gain$;
			Tx_gain_fb$ = Tx_gain;
			makeString(sTempSend, "\x8D%s\x03%s\x00\x8D%s", sNode, Card$, iToVolumePercent(Tx_gain$));
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKTx_gain = 1;
		}
	}
}    
CHANGE Rx_gain$
{   
	if(Rx_gain$ <> Rx_gain)
	{   
		if(xOKRx_gain)
		{
			xOKRx_gain = 0;
			Rx_gain = Rx_gain$;
			Rx_gain_fb$ = Rx_gain;
			makeString(sTempSend, "\x8D%s\x03%s\x00\x90%s", sNode, Card$, iToVolumePercent(Rx_gain$));
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKRx_gain = 1;
		}
	}
}
CHANGE DTMF_gain$
{  
	if(DTMF_gain$ <> DTMF_gain)
	{  
		if(xOKDTMF_gain)
		{ 
			xOKDTMF_gain = 0;
			DTMF_gain = DTMF_gain$;
			DTMF_gain_fb$ = DTMF_gain;
			makeString(sTempSend, "\x8D%s\x03%s\x00\x92%s", sNode, Card$, iToVolumePercent(DTMF_gain$));
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKDTMF_gain = 1;
		}
	}
}
CHANGE Dial_tone_gain$
{   
	if(Dial_tone_gain$ <> Dial_tone_gain)
	{   
		if(xOKDial_tone_gain)
		{ 
			xOKDial_tone_gain=0;
			Dial_tone_gain = Dial_tone_gain$;
			Dial_tone_gain_fb$ = Dial_tone_gain;
			makeString(sTempSend, "\x8D%s\x03%s\x00\x94%s", sNode, Card$, iToVolumePercent(Dial_Tone_gain$));
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKDial_tone_gain=1;
		}
	}
}
CHANGE Ring_gain$
{    
	if(Ring_gain$ <> Ring_gain)
	{      
		if(xOKRing_gain)
		{
			xOKRing_gain=0;
			Ring_gain = Ring_gain$;
			Ring_gain_fb$ = Ring_gain;
			makeString(sTempSend, "\x8D%s\x03%s\x00\x93%s", sNode, Card$, iToVolumePercent(Ring_gain$));
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKRing_gain=1;
		}
	}
}

  

PUSH Button_1$
{ 
	makeString(sTempSend, "\x88%s\x03%s\x00\x69\x00\x00\x00\x01", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x69\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Button_2$  
{          
	makeString(sTempSend, "\x88%s\x03%s\x00\x6A\x00\x00\x00\x01", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x6A\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Button_3$
{  
	makeString(sTempSend, "\x88%s\x03%s\x00\x6B\x00\x00\x00\x01", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x6B\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Button_4$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x6C\x00\x00\x00\x01", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x6C\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Button_5$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x6D\x00\x00\x00\x01", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x6D\x00\x00\x00\x00", sNode, Card$); 
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Button_6$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x6E\x00\x00\x00\x01", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x6E\x00\x00\x00\x00", sNode, Card$); 
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Button_7$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x6F\x00\x00\x00\x01", sNode, Card$); 
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x6F\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Button_8$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x70\x00\x00\x00\x01", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x70\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Button_9$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x71\x00\x00\x00\x01", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x71\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Button_0$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x68\x00\x00\x00\x01", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x68\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}

PUSH hang_Up$
{ 
	makeString(sTempSend, "\x88%s\x03%s\x00\x7F\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Dial$
{      
	makeString(sTempSend, "\x88%s\x03%s\x00\x7F\x00\x00\x00\x01", sNode, Card$);  
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH toggle_Dial_Hang_Up$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x79\x00\x00\x00\x01", sNode, Card$);  
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x79\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Button_pause$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x74\x00\x00\x00\x01", sNode, Card$); 
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x74\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Button_delete$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x76\x00\x00\x00\x01", sNode, Card$); 
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x76\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Button_redial$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x78\x00\x00\x00\x01", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x78\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Button_international_plus$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x75\x00\x00\x00\x01", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x75\x00\x00\x00\x00", sNode, Card$); 
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Button_backspace$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x77\x00\x00\x00\x01", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x77\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Button_flash$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x7B\x00\x00\x00\x01", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x7B\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Button_#$
{       
	makeString(sTempSend, "\x88%s\x03%s\x00\x72\x00\x00\x00\x01", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x72\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}
PUSH Button_asterisk$ 
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x73\x00\x00\x00\x01", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s\x00\x73\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}

PUSH Tx_muteOn$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x8C\x00\x00\x00\x01", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	if(subscribe)
	{     
		makeString(sTempSend, "\x89%s\x03%s\x00\x8C\x00\x00\x00\x00", sNode, Card$);//get mute feedback
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}
PUSH Tx_muteOff$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x8C\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	if(subscribe)
	{     
		makeString(sTempSend, "\x89%s\x03%s\x00\x8C\x00\x00\x00\x00", sNode, Card$);//get mute feedback
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}
PUSH Tx_muteToggle$
{  
	if(Tx_mute_fb$)
	{
	    makeString(sTempSend, "\x88%s\x03%s\x00\x8C\x00\x00\x00\x00", sNode, Card$);
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		if(subscribe)
		{     
			makeString(sTempSend, "\x89%s\x03%s\x00\x8C\x00\x00\x00\x00", sNode, Card$);//get mute feedback
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
		}
	} 
	else
	{
		makeString(sTempSend, "\x88%s\x03%s\x00\x8C\x00\x00\x00\x01", sNode, Card$);
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		if(subscribe)
		{     
			makeString(sTempSend, "\x89%s\x03%s\x00\x8C\x00\x00\x00\x00", sNode, Card$);//get mute feedback
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
		}
	} 
} 
PUSH Rx_muteOn$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x8F\x00\x00\x00\x01", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	if(subscribe)
	{     
		makeString(sTempSend, "\x89%s\x03%s\x00\x8F\x00\x00\x00\x00", sNode, Card$);//get mute feedback
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}
PUSH Rx_muteOff$
{    
	makeString(sTempSend, "\x88%s\x03%s\x00\x8F\x00\x00\x00\x00", sNode, Card$);
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	if(subscribe)
	{     
		makeString(sTempSend, "\x89%s\x03%s\x00\x8F\x00\x00\x00\x00", sNode, Card$);//get mute feedback
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}
PUSH Rx_muteToggle$
{  
	if(Rx_mute_fb$)
	{
	    makeString(sTempSend, "\x88%s\x03%s\x00\x8F\x00\x00\x00\x00", sNode, Card$);
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		if(subscribe)
		{     
			makeString(sTempSend, "\x89%s\x03%s\x00\x8F\x00\x00\x00\x00", sNode, Card$);//get mute feedback
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
		}
	} 
	else
	{
		makeString(sTempSend, "\x88%s\x03%s\x00\x8F\x00\x00\x00\x01", sNode, Card$);
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		if(subscribe)
		{     
			makeString(sTempSend, "\x89%s\x03%s\x00\x8F\x00\x00\x00\x00", sNode, Card$);//get mute feedback
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
		}
	} 
}

PUSH speed_Store$
{  
	xSave = getLastModifiedArrayIndex();
	stateVarSave =  (xSave-1)*7+204;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, Card$, chr(high(stateVarSave)), chr(low(stateVarSave))); 
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, Card$, chr(high(stateVarSave)), chr(low(stateVarSave)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}

PUSH speed_Dial$
{       
	xDial = getLastModifiedArrayIndex();
	stateVarDial =  (xDial-1)*7+205;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, Card$, chr(high(stateVarDial)), chr(low(stateVarDial))); 
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, Card$, chr(high(stateVarDial)), chr(low(stateVarDial)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";
}

function ProcessRxMessage(string paramData)
{
	INTEGER temp; 
	if(find("Send Name", paramData) > 0)
	{
		iTempNum = atoi(paramData);
		iMarker1 = find("Node ", paramData) + 5;
		sNode = mid(paramData, iMarker1, 2);
		sCard = fPad(Card$);
		makestring(tx$, "Send Name%d = %s\x03\x03\x03\x03\x03", iTempNum, sCard);
	}
	else if((mid(paramData, 7, 3) = "\x00\x00\x00") || (mid(paramData, 7, len(sCard)) = sCard))
	{                 
		paramData = fUnpad(paramData);
		cswitch(wordToI(paramData,9,10))
		{  
			case (100)://first 8 numbers of telephone number
			{
				if(mainRec3)
				{
					mainRec3 = 0;
					Phone_number_fb$ = mainStr3+bytesToString(wordToI(paramData,11,12),wordToI(paramData,13,14));
				}
				else
				{             
					Phone_number_fb$ = bytesToString(wordToI(paramData,11,12),wordToI(paramData,13,14));
				}
				break;
			}                                              
			case (101)://second 8 numbers of telephone number
			{   
				mainRec3 = 1;
				if(mainRec2)
				{
					mainRec2 = 0;
					mainStr3 = mainStr2+bytesToString(wordToI(paramData,11,12),wordToI(paramData,13,14));
				}
				else
				{             
					mainStr3 = bytesToString(wordToI(paramData,11,12),wordToI(paramData,13,14));
				}
				break;
			}
			case (102)://third 8 numbers of telephone number
			{       
				mainRec2 = 1;
				if(mainRec1)
				{
					mainRec1 = 0;
					mainStr2 = mainStr1+bytesToString(wordToI(paramData,11,12),wordToI(paramData,13,14));
				}
				else
				{             
					mainStr2 = bytesToString(wordToI(paramData,11,12),wordToI(paramData,13,14));
				}
				break;
			}
			case (103)://fourth 8 numbers of telephone number
			{   
				mainRec1 = 1;
				mainStr1 = bytesToString(wordToI(paramData,11,12),wordToI(paramData,13,14));
				break;
			}  
			case (122)://incoming call
			{ 
				Incoming_Call_FB$ = byte(paramData, 14); 
				break;
			}
			case (124)://auto answer
			{  
				//print("got here"); 
				auto_answer_fb$ = byte(paramData, 14);
				break;
			} 
			case (126)://Hook unhook
			{   
				hook_Status_fb$ = byte(paramData, 14);
				break;
			}
			case (140)://Tx mute
			{  
				 Tx_mute_fb$ = byte(paramData, 14);
				 break;
			}
			case (141)://Tx gain
			{    
				volumeInput = volumePercentToI(mid(paramData, 11, 4));
				Tx_gain_fb$ = (volumeInput);
				break;
			}
			case (142)://Tx meter
			{    
				volumeInput = volumePercentToI(mid(paramData, 11, 4));
				Tx_meter_fb$ = (volumeInput);
				break;
			}
			case (143)://Rx mute
			{
				Rx_mute_fb$ = byte(paramData, 14);
				break;
			} 
			case (144)://Rx gain
			{    
				volumeInput = volumePercentToI(mid(paramData, 11, 4));
				Rx_gain_fb$ = (volumeInput);
				break;
			} 
			case (145)://Rx meter
			{    
				volumeInput = volumePercentToI(mid(paramData, 11, 4));
				Rx_meter_fb$ = (volumeInput);
				break;
			}
			case (146)://DTMF gain
			{   
				volumeInput = volumePercentToI(mid(paramData, 11, 4));
				DTMF_gain_fb$ = (volumeInput);
				break;
			} 
			case (147)://Ring gain
			{  
				volumeInput = volumePercentToI(mid(paramData, 11, 4));
				Ring_gain_fb$ = (volumeInput);
				break;
			}                
			case (148)://Dial Tone gain
			{   
				volumeInput = volumePercentToI(mid(paramData, 11, 4));
				Dial_tone_gain_fb$ = (volumeInput);
				break;
			} 
		}
	}
}

#if_series3  
THREADSAFE CHANGE rx$
{ 
	while(1)
	{
		try
		{
			tempString = "";
			tempString = gather("\x03\x03\x03\x03\x03", rx$);
			tempString = left(tempString, len(tempString) - 4);
			ProcessRxMessage(tempString);
		}
		catch
		{
			generateusernotice("BSS SoundWeb London Analog Telephone Input Card %s Error: %s", card$, getexceptionmessage());
		}
	}
}
#else
integer semaphore;
THREADSAFE CHANGE rx$
{ 
	if(semaphore = 0)
	{
		semaphore = 1;
		while(1)
		{
			tempString = "";
			tempString = gather("\x03\x03\x03\x03\x03", rx$);
			tempString = left(tempString, len(tempString) - 4);
			ProcessRxMessage(tempString);
		}
		semaphore = 0;
	}
}
#endif
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	xOKRing_gain=1;
	xOKDTMF_gain=1;
	xOKDial_tone_gain=1;
	xOKTx_gain=1;
	xOKRx_gain=1;
	xOKSubscribe = 1;
	subscribe = 0; 
	mainRec1 = 0;
	mainRec2 = 0;
	mainRec3 = 0;
#if_series2
	semaphore = 0;
#endif
}
