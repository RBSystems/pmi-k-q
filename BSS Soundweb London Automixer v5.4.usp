/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics, Inc.
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BSS SoundWeb London Auto Mixer Drive v5.4"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE   
#ANALOG_SERIAL_EXPAND INPUTSWITHOUTPUTS
#HELP_PDF_FILE "bss soundweb london automixer help.pdf"
#ENABLE_STACK_CHECKING

#HELP_BEGIN
	version 5.4
	see help file bss soundweb london automixer v5.4 help.pdf 
#HELP_END
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _skip_, _skip_, mute$, unMute$; 
DIGITAL_INPUT _skip_, polarityOn$, polarityOff$;
DIGITAL_INPUT _skip_, routeToGroup1On$, routeToGroup2On$, routeToGroup3On$, routeToGroup4On$; 
DIGITAL_INPUT _skip_, routeToGroup1Off$, routeToGroup2Off$, routeToGroup3Off$, routeToGroup4Off$;
DIGITAL_INPUT _skip_, soloOn$, soloOff$;
DIGITAL_INPUT _skip_, overrideOn$, overrideOff$; 
DIGITAL_INPUT _skip_,autoOn$, autoOff$;
DIGITAL_INPUT _skip_,subscribe$,unSubscribe$;
ANALOG_INPUT _skip_, gain$, _skip_;
ANALOG_INPUT _skip_, pan$;
ANALOG_INPUT _skip_, offGain$; 
ANALOG_INPUT _skip_, input$;
BUFFER_INPUT _skip_, rx$[4000]; 
ANALOG_INPUT _skip_, aux$[4];


DIGITAL_OUTPUT _skip_,_skip_, mute_fb$;
DIGITAL_OUTPUT _skip_, _skip_, polarity_fb$; 
DIGITAL_OUTPUT _skip_, _skip_, routeToGroup1_fb$, routeToGroup2_fb$, routeToGroup3_fb$, routeToGroup4_fb$; 
DIGITAL_OUTPUT _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, solo_fb$; 
DIGITAL_OUTPUT _skip_, _skip_, override_fb$;
DIGITAL_OUTPUT _skip_, _skip_, auto_fb$;
ANALOG_OUTPUT _skip_, _skip_, _skip_, _skip_, _skip_, gain_fb$;
ANALOG_OUTPUT _skip_, _skip_, pan_fb$;
ANALOG_OUTPUT _skip_, offGain_fb$; 
STRING_OUTPUT _skip_, _skip_, _skip_, tx$;  
ANALOG_OUTPUT _skip_, aux_fb$[4]; 
/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
STRING_PARAMETER ObjectID$[3];
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES ObjectID$   
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   //propBounds = lower_bound , upper_bound;
   propDefaultValue = "\x00\x01\x00"; 

   propShortDescription = "HiQnet Object ID in 3-byte **HEX** ie\x00\x01\x00";
   #BEGIN_PROP_FULL_DESCRIPTION  
    "SEE HELP FILE"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER stateVar, stateVarSub, stateVarUnSub, subscribe, iTempNum, iMarker1, i;
INTEGER xRoute, xAux, xSubscribe, xUnSubscribe, input, volume;
STRING returnString[4];
INTEGER returnI;
INTEGER xOKGain, xOKOffGain, xOKSubscribe, volumeInput, rxSV;
STRING tempString[40], sTempSend[100], sObjectIDPadded[10], sNode[6];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
String_Function send(STRING str1)
{        
	INTEGER checksum;
	STRING fsTempReturn[100], sendString[100];
	
	checksum = 0;
	sendString = "";
	for (i = 1 to len(str1))                                                               
	{             
		checksum = checksum ^ byte(str1, i);
		if (byte(str1, i) = 2 || byte(str1, i) = 3 || byte(str1, i) = 6 || byte(str1, i) = 21 || byte(str1, i) = 27)
		{     
			makeString(sendString, "%s\x1B%s", sendString, chr(byte(str1, i) + 128));
		}               
		else
		{
			makeString(sendString, "%s%s", sendString, chr(byte(str1, i)));
		}
	}                  
	if (checksum = 2 || checksum = 3 || checksum = 6 || checksum = 21 || checksum = 27)
	{
		makeString(fsTempReturn, "\x02%s\x1B%s\x03", sendString, chr(checksum+128));
	}
	else
	{                                      
		makeString(fsTempReturn, "\x02%s%s\x03", sendString, chr(checksum));
	}
	return(fsTempReturn);
}

String_Function iToVolumePercent(INTEGER int)
{   
	// number from 0 - 65535  
	volume = (int*100)/65535;                            
	returnString = "\x00" + chr(volume) + "\x00\x00";
    Return (returnString);

}

Integer_Function volumePercentToI(STRING str)
{   
	INTEGER fraction;                      
	fraction = byte(str,3)*256+byte(str,4);
	if(fraction > 32767){
		volume = ((byte(str, 2)+1)*65535)/100;                  
	}
	else{
		volume = (byte(str, 2)*65535)/100;
	}
	returnI = volume;

    Return (returnI);
}

String_Function fPad(STRING fsPad)
{
	INTEGER fiA;
	
	STRING fsReturn[10];
	
	fsReturn = "";
	for(fiA = 1 to len(fsPad))
	{
		if (byte(fsPad, fiA) = 2 || byte(fsPad, fiA) = 3 || byte(fsPad, fiA) = 6 || byte(fsPad, fiA) = 21 || byte(fsPad, fiA) = 27)
		{     
			makeString(fsReturn, "%s\x1B%s", fsReturn, chr(byte(fsPad, fiA) + 128));
		}               
		else
		{
			makeString(fsReturn, "%s%s", fsReturn, chr(byte(fsPad, fiA)));
		}
	}
	return(fsReturn);
}

String_Function fUnpad(STRING str2)
{
	INTEGER j;
	STRING receiveString[100];
	
	receiveString = "";
	for (j = 1 to len(str2))
	{
		if (byte(str2, j) = 27)
		{
			receiveString = receiveString + chr(byte(str2, j+1)-128);	
			j = j+1;
		} 
		else
		{
			receiveString = receiveString + chr(byte(str2, j));
		}
	}    
	while (byte(receiveString, 1) = 6)
	{
		receiveString = right(receiveString, len(receiveString)-1);
	}
	return (receiveString);
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH mute$
{        
	stateVar = ((input-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //Subscribe MUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH unMute$
{
	stateVar = ((input-1) * 100) + 1;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
   		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //Subscribe MUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH polarityOn$
{        
	stateVar = ((input-1) * 100) + 3;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
 		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //Subscribe POLARITY
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH polarityOff$
{
	stateVar = ((input-1) * 100) + 3;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
 		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //Subscribe POLARITY
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
		
	}
}

PUSH soloOn$
{        
	stateVar = ((input-1) * 100) + 4;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //SOLO
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH soloOff$
{
	stateVar = ((input-1) * 100) + 4;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //SOLO
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH overrideOn$
{        
	stateVar = ((input-1) * 100) + 5;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //OVERRIDE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH overrideOff$
{
	stateVar = ((input-1) * 100) + 5;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //OVERRIDE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH autoOn$
{        
	stateVar = ((input-1) * 100) + 7;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //AUTO
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH autoOff$
{
	stateVar = ((input-1) * 100) + 7;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //AUTO
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH routeToGroup1On$
{
	stateVar = ((input-1) * 100) + 40;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));		
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

    if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //ROUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}   

PUSH routeToGroup2On$
{
	stateVar = ((input-1) * 100) + 41;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));		
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

    if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //ROUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH routeToGroup3On$
{
	stateVar = ((input-1) * 100) + 42;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));		
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

    if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //ROUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH routeToGroup4On$
{
	stateVar = ((input-1) * 100) + 43;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));		
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

    if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //ROUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH routeToGroup1Off$
{
	stateVar = ((input-1) * 100) + 40;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));		
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //ROUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
} 

PUSH routeToGroup2Off$
{
	stateVar = ((input-1) * 100) + 41;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));		
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //ROUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH routeToGroup3Off$
{
	stateVar = ((input-1) * 100) + 42;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));		
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //ROUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH routeToGroup4Off$
{
	stateVar = ((input-1) * 100) + 43;
	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));		
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

     if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //ROUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

CHANGE gain$
{
	if(volumeInput <> gain$)
	{  
		if(xOKGain)
		{
			xOKGain = 0;
			stateVar = (input-1) * 100;
			volumeInput = gain$;
			gain_fb$ = volumeInput;
	                                                      
			makeString(sTempSend, "\x8D%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(gain$)); 
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKGain = 1;
		}
	}
}
  
CHANGE pan$
{
	stateVar = ((input-1) * 100) + 2;
	makeString(sTempSend, "\x8D%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(pan$));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x8E%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //PAN
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}
  
CHANGE offGain$
{    
	if(xOKOffGain)
	{
		xOKOffGain = 0;
		stateVar = ((input-1) * 100) + 6;
		makeString(sTempSend, "\x8D%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(offGain$));
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	     
		if(subscribe)
		{
			makeString(sTempSend, "\x8E%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //OFF GAIN
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
		}	           
		xOKOffGain = 1;
	}
}
  
CHANGE aux$
{         
	xAux = getLastModifiedArrayIndex();
	stateVar = ((input-1) * 100) + 20 + (xAux-1);
	makeString(sTempSend, "\x8D%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(aux$[xAux]));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x8E%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //AUX
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}
  
PUSH subscribe$
{
	wait(20)
	{          
		if(xOKSubscribe)
		{
			xOKSubscribe = 0;
			xSubscribe = (input-1) * 100;
			stateVarSub = xSubscribe;
			makeString(sTempSend, "\x8E%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //GAIN
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();

			stateVarSub = xSubscribe + 1;
			makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //MUTE
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();

			stateVarSub = xSubscribe + 2;
			makeString(sTempSend, "\x8E%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //PAN
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();

			stateVarSub = xSubscribe + 3;
			makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //POLARITY
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();

			stateVarSub = xSubscribe + 20;
			//print("\nSV %u",stateVarSub);
			//print(" %02X", byte(tempString2, i));
			makeString(sTempSend, "\x8E%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //AUX1
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();

			stateVarSub = xSubscribe + 21;
			makeString(sTempSend, "\x8E%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //AUX2
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();

			stateVarSub = xSubscribe + 22;
			makeString(sTempSend, "\x8E%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //AUX3
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();

			stateVarSub = xSubscribe + 23;
			makeString(sTempSend, "\x8E%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //AUX4
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();

			stateVarSub = xSubscribe + 40;
			makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //ROUTE1
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();

			stateVarSub = xSubscribe + 41;
			makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //ROUTE2
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();

			stateVarSub = xSubscribe + 42;
			makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //ROUTE3
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();

			stateVarSub = xSubscribe + 43;
			makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //ROUTE4
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();

			stateVarSub = xSubscribe + 4;
			makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //SOLO
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();

			stateVarSub = xSubscribe + 5;
			makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //OVERRIDE
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();

			stateVarSub = xSubscribe + 6;
			makeString(sTempSend, "\x8E%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //OFF GAIN
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();	

			stateVarSub = xSubscribe + 7;
			makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //AUTO
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();	

			subscribe = 1;
			xOKSubscribe = 1;
		}
	}
}

PUSH unSubscribe$
{
	if(xOKSubscribe)
	{
		xOKSubscribe = 0;
		xUnSubscribe = (input-1) * 100;
		stateVarUnSub = xUnSubscribe;
		makeString(sTempSend, "\x8F%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //GAIN
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();

		stateVarUnSub = xUnSubscribe + 1;
		makeString(sTempSend, "\x8A%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //MUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();

		stateVarUnSub = xUnSubscribe + 2;
		makeString(sTempSend, "\x8F%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //PAN
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();

		stateVarUnSub = xUnSubscribe + 3;
		makeString(sTempSend, "\x8A%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //POLARITY
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();

		stateVarUnSub = xUnSubscribe + 20;
		makeString(sTempSend, "\x8F%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //AUX1
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();

		stateVarUnSub = xUnSubscribe + 21;
		makeString(sTempSend, "\x8F%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //AUX2
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();

		stateVarUnSub = xUnSubscribe + 22;
		makeString(sTempSend, "\x8F%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //AUX3
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();

		stateVarUnSub = xUnSubscribe + 23;
		makeString(sTempSend, "\x8F%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //AUX4
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();

		stateVarUnSub = xUnSubscribe + 40;
		makeString(sTempSend, "\x8A%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //ROUTE1
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();

		stateVarUnSub = xUnSubscribe + 41;
		makeString(sTempSend, "\x8A%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //ROUTE2
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();

		stateVarUnSub = xUnSubscribe + 42;
		makeString(sTempSend, "\x8A%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //ROUTE3
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();

		stateVarUnSub = xUnSubscribe + 43;
		makeString(sTempSend, "\x8A%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //ROUTE4
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();

		stateVarUnSub = xUnSubscribe + 4;
		makeString(sTempSend, "\x8A%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //SOLO
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();

		stateVarUnSub = xUnSubscribe + 5;
		makeString(sTempSend, "\x8A%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //OVERRIDE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();

		stateVarUnSub = xUnSubscribe + 6;
		makeString(sTempSend, "\x8F%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //OFF GAIN
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();	

		stateVarUnSub = xUnSubscribe + 7;
		makeString(sTempSend, "\x8A%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarUnSub)), chr(low(stateVarUnSub)));  //AUTO
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();	

		subscribe = 0;
		xOKSubscribe = 1;
	}
}  

change input$
{
	if(input$ > 0)
	{
		input = input$;
	}
	else       
	{
		input = 1;
//		print ("error input for the automixer cannot be 0. set to default of 1");
	}
}

function ProcessRxMessage(string paramData)
{
	if(find("Send Name", paramData) > 0)
	{
		iTempNum = atoi(paramData);
		iMarker1 = find("Node ", paramData) + 5;
		sNode = mid(paramData, iMarker1, 2);
		sObjectIDPadded = fPad(objectID$);
		makestring(tx$, "Send Name%d = %s\x03\x03\x03\x03\x03", iTempNum, sObjectIDPadded);
	}
	else if((mid(paramData, 7, 3) = "\x00\x00\x00") || (mid(paramData, 7, len(sObjectIDPadded)) = sObjectIDPadded))
	{
//			print("input = %d",input); 
		paramData = fUnpad(paramData);
		rxSV = ((byte(paramData, 9) * 256 ) + byte(paramData, 10));
		if((rxSV/100) = input - 1)
		{   
			switch (rxSV MOD 100)
			{
				case (0): 
				{	
					volumeInput = volumePercentToI(mid(paramData, 11, 4));
					gain_fb$ = volumeInput;
				}
				case (1): mute_fb$ = byte(paramData, 14);
				case (2): pan_fb$ = volumePercentToI(mid(paramData, 11, 4));
				case (3): polarity_fb$ = byte(paramData, 14);
				case (20): aux_fb$[1] = volumePercentToI(mid(paramData, 11, 4));
				case (21): aux_fb$[2] = volumePercentToI(mid(paramData, 11, 4));
				case (22): aux_fb$[3] = volumePercentToI(mid(paramData, 11, 4));
				case (23): aux_fb$[4] = volumePercentToI(mid(paramData, 11, 4));
				case (40): routeToGroup1_fb$ = byte(paramData, 14);
				case (41): routeToGroup2_fb$ = byte(paramData, 14);
				case (42): routeToGroup3_fb$ = byte(paramData, 14);
				case (43): routeToGroup4_fb$ = byte(paramData, 14);
				case (4): solo_fb$ = byte(paramData, 14);
				case (5): override_fb$ = byte(paramData, 14);
				case (6): offGain_fb$ = volumePercentToI(mid(paramData, 11, 4));
				case (7): auto_fb$ = byte(paramData, 14);
			}
		}
	}
}

#if_series3
THREADSAFE CHANGE rx$
{
	while(1)
	{
		try
		{
			tempString = "";
			tempString = gather("\x03\x03\x03\x03\x03", rx$);
			tempString = left(tempString, len(tempString) - 4);
			ProcessRxMessage(tempString);
		}
		CATCH
		{
			generateusernotice("BSS SoundWeb London Automixer Error: %s", getexceptionmessage());
		}
	}
}
#else
integer semaphore;
CHANGE rx$
{
	if(semaphore = 0)
	{
		semaphore = 1;
		while(1)
		{
			tempString = "";
			tempString = gather("\x03\x03\x03\x03\x03", rx$);
			tempString = left(tempString, len(tempString) - 4);
			ProcessRxMessage(tempString);
		}
		semaphore = 0;
	}
}
#endif
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
    subscribe = 0; 
    //WaitForInitializationComplete();    
    xOKGain = 1; 
    xOKSubscribe = 1; 
    xOKOffGain = 1; 
#if_series2
	semaphore = 0;
#endif
}
