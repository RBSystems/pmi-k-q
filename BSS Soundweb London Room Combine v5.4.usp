/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics, Inc.
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BSS Soundweb London Room Combine Drive v5.4"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #DEFAULT_NONVOLATILE 
#ANALOG_SERIAL_EXPAND INPUTSWITHOUTPUTS
#DIGITAL_EXPAND INPUTSWITHOUTPUTS 
#HELP_PDF_FILE "bss soundweb london room combine help.pdf"
#ENABLE_STACK_CHECKING

#HELP_BEGIN 
	version 5.4
This module is used to control a Room Combine Processing Object inside London Architect.   
Offset: 0 for Rm1-8; 1 for Rm9-16; 2 for Rm17-24, etc

All Mutes are toggle.  On each rising edge the mutestate will change.

Enable Feedback: While high a subscription will be sent out that will sync the Crestron to
the current state of the London.  From that point on all feedback will be real.  Once this signal 
goes low the London will not report feedback.

see help file bss soundweb london room combine help.pdf

#HELP_END
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _skip_,_skip_, Enable_Feedback$, Disable_Feedback$;
BUFFER_INPUT RX$[4000];

STRING_OUTPUT _skip_, TX$;

Digital_Input _skip_,SourceMute_Rm$[8], BGM_Mute_Rm$[8], MasterMute_Rm$[8],_skip_, Partition$[8], _skip_;
ANALOG_INPUT Chan_Offset$,_skip_, SourceGain_Rm$[8], BGM_Gain_Rm$[8], MasterGain_Rm$[8], BGM_Input_Rm$[8],Group_Rm$[8];

DIGITAL_OUTPUT _skip_,_skip_,_skip_,_skip_,_skip_, SourceMute_Rm_FB$[8], BGM_Mute_Rm_FB$[8], MasterMute_Rm_FB$[8],_skip_, Partition_FB$[8];
ANALOG_OUTPUT _skip_,_skip_, SourceGain_Rm_FB$[8], BGM_Gain_Rm_FB$[8], MasterGain_Rm_FB$[8], BGM_Input_Rm_FB$[8],Group_Rm_FB$[8];
/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER Max_Rooms$;
STRING_PARAMETER objectID$[3];
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES Max_Rooms$
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 8d;
   propDefaultValue = 0d; 
   #BEGIN_PROP_FULL_DESCRIPTION  
    "See Help File"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES objectID$
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "\x00\x00\x00"; 
   //propList = {"A","A"},{"B","B"},{"C","C"},{"D","D"};  
   #BEGIN_PROP_FULL_DESCRIPTION  
    "See Help File"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER offset, feedback, stateVar, SV, SV_MOD, stateVarGain, stateVarSub, stateVarUnSub, x;
STRING returnString[4];
INTEGER returnI, SourceGain[8], BGM_Gain[8], MasterGain[8]; 

INTEGER xOKSourceGain[8], xOKBGM_Gain[8], xOKMasterGain[8];
INTEGER xOKFeedback, i, volume, iTempNum, iMarker1;
STRING tempString[40], sTempSend[100], sObjectIDPadded[10], sNode[6]; 
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
String_Function send(STRING str1)
{        
	INTEGER checksum;
	STRING fsTempReturn[100], sendString[100];
	
	checksum = 0;
	sendString = "";
	for (i = 1 to len(str1))                                                               
	{             
		checksum = checksum ^ byte(str1, i);
		if (byte(str1, i) = 2 || byte(str1, i) = 3 || byte(str1, i) = 6 || byte(str1, i) = 21 || byte(str1, i) = 27)
		{     
			makeString(sendString, "%s\x1B%s", sendString, chr(byte(str1, i) + 128));
		}               
		else
		{
			makeString(sendString, "%s%s", sendString, chr(byte(str1, i)));
		}
	}                  
	if (checksum = 2 || checksum = 3 || checksum = 6 || checksum = 21 || checksum = 27)
	{
		makeString(fsTempReturn, "\x02%s\x1B%s\x03", sendString, chr(checksum+128));
	}
	else
	{                                      
		makeString(fsTempReturn, "\x02%s%s\x03", sendString, chr(checksum));
	}
	return(fsTempReturn);
}

String_Function iToVolumePercent(INTEGER int)
{                 
	// number from 0 - 65535  
	volume = (int*100)/65535;                            
	returnString = "\x00" + chr(volume) + "\x00\x00";
    Return (returnString);
}

Integer_Function volumePercentToI(STRING str)
{   
	INTEGER fraction;                      
	fraction = byte(str,3)*256+byte(str,4);
	if(fraction > 32767)
	{
		volume = ((byte(str, 2)+1)*65535)/100;                  
	}
	else
	{
		volume = (byte(str, 2)*65535)/100;
	}
	returnI = volume;

    Return (returnI);
}

String_Function fPad(STRING fsPad)
{
	INTEGER fiA;
	
	STRING fsReturn[10];
	
	fsReturn = "";
	for(fiA = 1 to len(fsPad))
	{
		if (byte(fsPad, fiA) = 2 || byte(fsPad, fiA) = 3 || byte(fsPad, fiA) = 6 || byte(fsPad, fiA) = 21 || byte(fsPad, fiA) = 27)
		{     
			makeString(fsReturn, "%s\x1B%s", fsReturn, chr(byte(fsPad, fiA) + 128));
		}               
		else
		{
			makeString(fsReturn, "%s%s", fsReturn, chr(byte(fsPad, fiA)));
		}
	}
	return(fsReturn);
}

String_Function fUnpad(STRING str2)
{
	INTEGER j;
	STRING receiveString[100];
	
	receiveString = "";
	for (j = 1 to len(str2))
	{
		if (byte(str2, j) = 27)
		{
			receiveString = receiveString + chr(byte(str2, j+1)-128);	
			j = j+1;
		} 
		else
		{
			receiveString = receiveString + chr(byte(str2, j));
		}
	}    
	while (byte(receiveString, 1) = 6)
	{
		receiveString = right(receiveString, len(receiveString)-1);
	}
	return (receiveString);
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
Change Chan_Offset$
{
  	offset = Chan_Offset$*8;//zero for channels 1-8 (no offset ,offset = 0); offset = 1 for channels 9-16; offset = 2 for channels 17-24....
}  

PUSH Enable_Feedback$
{
	wait(20)
	{    
		if(xOKFeedback)
		{
			xOKFeedback = 0;
		 	feedback = 1;
			for(i = 1 to Max_Rooms$) //subscribe to all variables for feedback
			{
			    stateVarSub = (((i+offset)-1) * 50) + 256;//SourceMute
				makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //SourceMUTE   	    
				tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			    stateVarSub = (((i+offset)-1) * 50) + 258;//BGM Mute
				makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //BGM MUTE   	    
				tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			    stateVarSub = (((i+offset)-1) * 50) + 254;//MasterMute
				makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //MasterMUTE   	    
				tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			    stateVarSub = (((i+offset)-1) * 50) + 255;//SourceGain
				makeString(sTempSend, "\x8E%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//SourceGain
				tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			    stateVarSub = (((i+offset)-1) * 50) + 257;//BGM Gain
				makeString(sTempSend, "\x8E%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//BGM Gain
				tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			    stateVarSub = (((i+offset)-1) * 50) + 252;//MasterGain
				makeString(sTempSend, "\x8E%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//MaseterGain
				tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			    stateVarSub = (((i+offset)-1) * 50) + 259;//BGM Input
				makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //BGM Input   	    
				tx$ = send(sTempSend) + "\x03\x03\x03\x03";
				stateVarSub = ((i+offset)-1);//Partition
				makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //Partition
				tx$ = send(sTempSend) + "\x03\x03\x03\x03";
				stateVarSub = (((i+offset)-1) * 50) + 250;//Group
				makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //Group
				tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			}	
			xOKFeedback = 1;
		}
	}
}
         
PUSH Disable_Feedback$
{  
	if(xOKFeedback)
	{
		xOKFeedback = 0;
		feedback = 0;
		for(i = 1 to Max_Rooms$) //subscribe to all variables for feedback
		{
		    stateVarSub = (((i+offset)-1) * 50) + 256;//SourceMute
			makeString(sTempSend, "\x8A%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //SourceMUTE   	    
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		    stateVarSub = (((i+offset)-1) * 50) + 258;//BGM Mute
			makeString(sTempSend, "\x8A%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //BGM MUTE   	    
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		    stateVarSub = (((i+offset)-1) * 50) + 254;//MasterMute
			makeString(sTempSend, "\x8A%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //MasterMUTE   	    
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		    stateVarSub = (((i+offset)-1) * 50) + 255;//SourceGain
			makeString(sTempSend, "\x8F%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//SourceGain
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		    stateVarSub = (((i+offset)-1) * 50) + 257;//BGM Gain
			makeString(sTempSend, "\x8F%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//BGM Gain
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		    stateVarSub = (((i+offset)-1) * 50) + 252;//MasterGain
			makeString(sTempSend, "\x8F%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)),"\x00\x00\x00\x00");	//MaseterGain
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		    stateVarSub = (((i+offset)-1) * 50) + 259;//BGM Input
			makeString(sTempSend, "\x8A%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //BGM Input   	    
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			stateVarSub = ((i+offset)-1);//Partition
			makeString(sTempSend, "\x8A%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //Partition
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			stateVarSub = (((i+offset)-1) * 50) + 250;//Group
			makeString(sTempSend, "\x8A%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVarSub)), chr(low(stateVarSub)));  //Group
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		}    
		xOKFeedback = 1;
	}    
}

PUSH SourceMute_Rm$
{        
	x = getLastModifiedArrayIndex();
    stateVar = (((x+offset)-1) * 50) + 256; //SVID of SourceMute
   
	if (SourceMute_Rm_FB$[x])//muted
	{
   		makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));//ummute
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
   	}
	else //unmute
	{
		makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));//mute
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
	if(feedback) //send subscribe (GET) string
	{
    	makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
    }
}

PUSH BGM_Mute_Rm$
{        
	x = getLastModifiedArrayIndex();
	stateVar = (((x+offset)-1) * 50) + 258; //SVID of SourceMute
	
	if(BGM_Mute_Rm_FB$[x])
	{
		makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
	else
	{
		makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
	if(feedback) //send subscribe (GET) string
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}
 
PUSH MasterMute_Rm$
{        
	x = getLastModifiedArrayIndex();
	stateVar = (((x+offset)-1) * 50) + 254; //SVID of SourceMute

	if(MasterMute_Rm_FB$[x])
	{
		makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
	else
	{
		makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
	if(feedback) //send subscribe (GET) string
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));  //MUTE
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}
         
CHANGE SourceGain_Rm$
{	
    x = getLastModifiedArrayIndex();

	if(SourceGain[x] <> SourceGain_Rm$[x])
	{    
		if(xOKSourceGain[x])
		{
			xOKSourceGain[x] = 0;
			stateVar = (((x+offset)-1) * 50)+255;
    		SourceGain[x] = SourceGain_Rm$[x];
			SourceGain_Rm_FB$[x] = SourceGain_Rm$[x];
			makeString(sTempSend, "\x8D%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(SourceGain_Rm$[x]));		
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKSourceGain[x] = 1;
		}
	}
}
     
CHANGE BGM_Gain_Rm$
{	
    x = getLastModifiedArrayIndex();

	if(BGM_Gain[x] <> BGM_Gain_Rm$[x])
	{    
		if(xOKBGM_Gain[x])
		{
			xOKBGM_Gain[x] = 0;
			stateVar = (((x+offset)-1) * 50)+257;
    		BGM_Gain[x] = BGM_Gain_Rm$[x];
			BGM_Gain_Rm_FB$[x] = BGM_Gain_Rm$[x];
			makeString(sTempSend, "\x8D%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(BGM_Gain_Rm$[x]));		
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKBGM_Gain[x] =1;
		}
	}
}
         
CHANGE MasterGain_Rm$
{	
    x = getLastModifiedArrayIndex();

	if(MasterGain[x] <> MasterGain_Rm$[x])
	{ 
		if(xOKMasterGain[x])
		{
			xOKMasterGain[x] = 0;
			stateVar = (((x+offset)-1) * 50)+252;
    		MasterGain[x] = MasterGain_Rm$[x];
			MasterGain_Rm_FB$[x] = MasterGain_Rm$[x];
			makeString(sTempSend, "\x8D%s\x03%s%s%s%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)), iToVolumePercent(MasterGain_Rm$[x]));		
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			xOKMasterGain[x] = 1;
		}
	}
}

          
CHANGE BGM_Input_Rm$
{        
	x = getLastModifiedArrayIndex();
	stateVar = (((x+offset)-1) * 50) + 259; //SVID of SourceMute

	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)),chr(BGM_Input_RM$[x]));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(feedback) //send subscribe (GET) string
	{
		makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

PUSH Partition$
{        
	x = getLastModifiedArrayIndex();
	stateVar = (x+offset)-1; //SVID of Partition

	if(Partition_FB$[x])
	{
		makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
	else
	{
		makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00\x01", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
	if(feedback) //send subscribe (GET) string
	{
    	makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
    }
}

CHANGE Group_Rm$
{        
	x = getLastModifiedArrayIndex();
	stateVar = (((x+offset)-1) * 50) + 250; //SVID of Group

	makeString(sTempSend, "\x88%s\x03%s%s%s\x00\x00\x00%s", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)),chr(Group_Rm$[x]));
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(feedback) //send subscribe (GET) string
	{ 
    	makeString(sTempSend, "\x89%s\x03%s%s%s\x00\x00\x00\x00", sNode, objectID$, chr(high(stateVar)), chr(low(stateVar)));
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
    }
}

function ProcessRxMessage(string paramData)
{
	if(find("Send Name", paramData) > 0)
	{
		iTempNum = atoi(paramData);
		iMarker1 = find("Node ", paramData) + 5;
		sNode = mid(paramData, iMarker1, 2);
		sObjectIDPadded = fPad(objectID$);
		makestring(tx$, "Send Name%d = %s\x03\x03\x03\x03\x03", iTempNum, sObjectIDPadded);
	}
	else if((mid(paramData, 7, 3) = "\x00\x00\x00") || (mid(paramData, 7, len(sObjectIDPadded)) = sObjectIDPadded))
	{
		paramData = fUnpad(paramData);
		SV = ((byte(paramData, 9) * 256 ) + byte(paramData, 10)); //SV
		if(SV < 49)//partition
			Partition_FB$[(SV+1-offset)] = byte(paramData,14);	//Partition	
		Else if(SV > 249)
		{		
			SV_MOD = (SV MOD 50);
			Switch(SV_MOD)
			{
				Case(0):{Group_Rm_FB$[(SV-200)/50-offset] = byte(paramData,14);}//Group
				Case(6):{SourceMute_Rm_FB$[(SV-206)/50-offset] = byte(paramData,14);} //Source Mute -value of SV (mute-state)
				Case(8):{BGM_Mute_Rm_FB$[(SV-208)/50-offset] = byte(paramData,14);} //BGM Mute
				Case(4):{MasterMute_Rm_FB$[(SV-204)/50-offset] = byte(paramData,14);}//Master Mute
				Case(5)://Source Gain
				{
					SourceGain[(SV-205)/50-offset]= volumePercentToI(mid(paramData, 11, 4));
					SourceGain_Rm_FB$[(SV-205)/50-offset] = SourceGain[(SV-205)/50-offset];
				}
				Case(7)://BGM Gain
				{
					BGM_Gain[(SV-207)/50-offset]= volumePercentToI(mid(paramData, 11, 4));
					BGM_Gain_Rm_FB$[(SV-207)/50-offset] = BGM_Gain[(SV-207)/50-offset];
				} 
				Case(2)://Master Gain
				{
					MasterGain[(SV-202)/50-offset]= volumePercentToI(mid(paramData, 11, 4));
					MasterGain_Rm_FB$[(SV-202)/50-offset] = MasterGain[(SV-202)/50-offset];
				} 
				Case(9)://BGM Input
				{
					BGM_Input_Rm_FB$[(SV-209)/50-offset] = byte(paramData,14);
				} 
			}//switch SV_MOD
		}//else if SV > 249					
	}//if objectID
}

#if_series3
THREADSAFE CHANGE rx$
{
	while(1)
	{
		try
		{
			tempString = "";
			tempString = gather("\x03\x03\x03\x03\x03", rx$);
			tempString = left(tempString, len(tempString) - 4);
			ProcessRxMessage(tempString);
		}
		catch
		{
			generateusernotice("BSS SoundWeb London Room Combine Error: %s", getexceptionmessage());
		}
	}//while
}//change_RX
#else
integer semaphore;
Change rx$
{
	if(semaphore = 0)
	{
		semaphore = 1;
		while(1)
		{
			tempString = "";
			tempString = gather("\x03\x03\x03\x03\x03", rx$);
			tempString = left(tempString, len(tempString) - 4);
			ProcessRxMessage(tempString);
		}//while
		semaphore = 0;
	}
}//change_RX
#endif
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{     
	feedback = 1;
	Offset = 0;
	xOKFeedback = 1; 
	for (i=1 to 8)
	{
		xOKSourceGain[i] = 1;
	}   
	for (i=1 to 8)
	{
		xOKBGM_Gain[i] = 1;
	}       
	for (i=1 to 8)
	{
		xOKMasterGain[i] = 1;
	}
#if_series2
	semaphore = 0;
#endif
}
