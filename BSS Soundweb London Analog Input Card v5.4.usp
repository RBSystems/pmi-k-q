/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics, Inc.
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BSS SoundWeb London Analog Input Driver v5.4"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY ""
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
#ANALOG_SERIAL_EXPAND INPUTSWITHOUTPUTS
#DIGITAL_EXPAND INPUTSWITHOUTPUTS
#HELP_PDF_FILE "BSS SoundWeb London Analog Input Card Help.pdf"
#ENABLE_STACK_CHECKING

/*#HELP_BEGIN
	version 5.4
	For use inside the BSS SoundWeb London Analog Input v5.4 module only.
#HELP_END*/
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _skip_, _skip_, subscribe$, unSubscribe$;
DIGITAL_INPUT meter_subscribe$;

DIGITAL_INPUT _skip_, channel_1_phantomSwitchOn$;
DIGITAL_INPUT channel_1_phantomSwitchOff$;
DIGITAL_INPUT _skip_, channel_2_phantomSwitchOn$;
DIGITAL_INPUT channel_2_phantomSwitchOff$;
DIGITAL_INPUT _skip_, channel_3_phantomSwitchOn$;
DIGITAL_INPUT channel_3_phantomSwitchOff$;
DIGITAL_INPUT _skip_, channel_4_phantomSwitchOn$;
DIGITAL_INPUT channel_4_phantomSwitchOff$;

DIGITAL_INPUT _skip_, channel_1_muteOn$;
DIGITAL_INPUT channel_1_muteOff$;
DIGITAL_INPUT channel_1_muteToggle$;
DIGITAL_INPUT _skip_, channel_2_muteOn$;
DIGITAL_INPUT channel_2_muteOff$;
DIGITAL_INPUT channel_2_muteToggle$;
DIGITAL_INPUT _skip_, channel_3_muteOn$;
DIGITAL_INPUT channel_3_muteOff$;
DIGITAL_INPUT channel_3_muteToggle$;
DIGITAL_INPUT _skip_, channel_4_muteOn$;
DIGITAL_INPUT channel_4_muteOff$;
DIGITAL_INPUT channel_4_muteToggle$;

ANALOG_INPUT _skip_,_skip_, channel_1_reference$;
ANALOG_INPUT channel_1_attack$;
ANALOG_INPUT channel_1_release$;
ANALOG_INPUT channel_1_gain$;
 
ANALOG_INPUT _skip_,_skip_, channel_2_reference$;
ANALOG_INPUT channel_2_attack$;
ANALOG_INPUT channel_2_release$;
ANALOG_INPUT channel_2_gain$;

ANALOG_INPUT _skip_,_skip_, channel_3_reference$;
ANALOG_INPUT channel_3_attack$;
ANALOG_INPUT channel_3_release$;
ANALOG_INPUT channel_3_gain$;

ANALOG_INPUT _skip_,_skip_, channel_4_reference$;
ANALOG_INPUT channel_4_attack$;
ANALOG_INPUT channel_4_release$;
ANALOG_INPUT channel_4_gain$;

BUFFER_INPUT _skip_, rx$[4000];

DIGITAL_OUTPUT _skip_,_skip_,_skip_,_skip_,_skip_,_skip_, channel_1_phantomSwitchOn_fb$;
DIGITAL_OUTPUT channel_1_phantomSwitchOff_fb$;
DIGITAL_OUTPUT _skip_, channel_2_phantomSwitchOn_fb$;
DIGITAL_OUTPUT channel_2_phantomSwitchOff_fb$;
DIGITAL_OUTPUT _skip_, channel_3_phantomSwitchOn_fb$;
DIGITAL_OUTPUT channel_3_phantomSwitchOff_fb$;
DIGITAL_OUTPUT _skip_, channel_4_phantomSwitchOn_fb$;
DIGITAL_OUTPUT channel_4_phantomSwitchOff_fb$;

DIGITAL_OUTPUT _skip_, channel_1_mute_fb$;
DIGITAL_OUTPUT _skip_,_skip_,_skip_, channel_2_mute_fb$;
DIGITAL_OUTPUT _skip_,_skip_,_skip_, channel_3_mute_fb$;
DIGITAL_OUTPUT _skip_,_skip_,_skip_, channel_4_mute_fb$;

ANALOG_OUTPUT _skip_,_skip_,_skip_, channel_1_meter_fb$;
ANALOG_OUTPUT channel_1_reference_fb$;
ANALOG_OUTPUT channel_1_attack_fb$;
ANALOG_OUTPUT channel_1_release_fb$;
ANALOG_OUTPUT channel_1_gain_fb$;

ANALOG_OUTPUT _skip_, channel_2_meter_fb$;
ANALOG_OUTPUT channel_2_reference_fb$;
ANALOG_OUTPUT channel_2_attack_fb$;
ANALOG_OUTPUT channel_2_release_fb$;
ANALOG_OUTPUT channel_2_gain_fb$;
                                         
ANALOG_OUTPUT _skip_, channel_3_meter_fb$;
ANALOG_OUTPUT channel_3_reference_fb$;
ANALOG_OUTPUT channel_3_attack_fb$;
ANALOG_OUTPUT channel_3_release_fb$;
ANALOG_OUTPUT channel_3_gain_fb$;
                                         
ANALOG_OUTPUT _skip_, channel_4_meter_fb$;
ANALOG_OUTPUT channel_4_reference_fb$;
ANALOG_OUTPUT channel_4_attack_fb$;
ANALOG_OUTPUT channel_4_release_fb$;
ANALOG_OUTPUT channel_4_gain_fb$;

STRING_OUTPUT _skip_, tx$;
/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER meterRate$;
INTEGER_PARAMETER card$;
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES meterRate$
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 50d , 2000d;
   propDefaultValue = 2000d;
   #BEGIN_PROP_FULL_DESCRIPTION
    "See Help File"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES card$
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   //propBounds = 1d , 4d;
   propDefaultValue = 1d;
   propList = {1d,"A"},{2d,"B"},{3d,"C"},{4d,"D"};
   #BEGIN_PROP_FULL_DESCRIPTION
    "See Help File"
   #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER iTempNum, iMarker1;
INTEGER xOKGain1, xOKGain2, xOKGain3, xOKGain4, xSubscribe;
STRING tempString[40], sTempSend[100], sCard[10], sNode[6];
STRING returnString[4];
INTEGER returnI, subscribe, meter_subscribe, volume;
INTEGER i, xValue, xPhantom, stateVarValue, stateVarPhantom, stateVarReceive;
INTEGER volumeInput[40];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
String_Function send(STRING str1)
{        
	INTEGER checksum;
	STRING fsTempReturn[100], sendString[100];
	
	checksum = 0;
	sendString = "";
	for (i = 1 to len(str1))                                                               
	{             
		checksum = checksum ^ byte(str1, i);
		if (byte(str1, i) = 2 || byte(str1, i) = 3 || byte(str1, i) = 6 || byte(str1, i) = 21 || byte(str1, i) = 27)
		{     
			makeString(sendString, "%s\x1B%s", sendString, chr(byte(str1, i) + 128));
		}               
		else
		{
			makeString(sendString, "%s%s", sendString, chr(byte(str1, i)));
		}
	}                  
	if (checksum = 2 || checksum = 3 || checksum = 6 || checksum = 21 || checksum = 27)
	{
		makeString(fsTempReturn, "\x02%s\x1B%s\x03", sendString, chr(checksum+128));
	}
	else
	{                                      
		makeString(fsTempReturn, "\x02%s%s\x03", sendString, chr(checksum));
	}
	return(fsTempReturn);
}

String_Function iToVolumePercent(INTEGER int)
{
	// number from 0 - 65535  
	volume = (int*100)/65535;
	returnString = "\x00" + chr(volume) + "\x00\x00";
    Return (returnString);
}

Integer_Function volumePercentToI(STRING str)
{
	INTEGER fraction;
	fraction = byte(str,3)*256+byte(str,4);
	if(fraction > 32767)
	{
		volume = ((byte(str, 2)+1)*65535)/100;
	}
	else
	{
		volume = (byte(str, 2)*65535)/100;
	}
	returnI = volume;

    Return (returnI);
}
  
Integer_Function wordToI(STRING sSourceString, Integer iHighByte, Integer iLowByte)//will take string and return integer Word
{
	INTEGER iWord;

	if((byte(sSourceString,iHighByte) <> 65535) && byte(sSourceString,iLowByte) <> 65535)//error check
	{
		iWord = (byte(sSourceString,iHighByte)*256)+byte(sSourceString,iLowByte);
	}
    else
    {
		iWord = 65535;
	}
	
	Return (iWord);
}     

String_Function fPad(STRING fsPad)
{
	INTEGER fiA;
	
	STRING fsReturn[10];
	
	fsReturn = "";
	for(fiA = 1 to len(fsPad))
	{
		if (byte(fsPad, fiA) = 2 || byte(fsPad, fiA) = 3 || byte(fsPad, fiA) = 6 || byte(fsPad, fiA) = 21 || byte(fsPad, fiA) = 27)
		{     
			makeString(fsReturn, "%s\x1B%s", fsReturn, chr(byte(fsPad, fiA) + 128));
		}               
		else
		{
			makeString(fsReturn, "%s%s", fsReturn, chr(byte(fsPad, fiA)));
		}
	}
	return(fsReturn);
}

String_Function fUnpad(STRING str2)
{
	INTEGER j;
	STRING receiveString[100];
	
	receiveString = "";
	for (j = 1 to len(str2))
	{
		if (byte(str2, j) = 27)
		{
			receiveString = receiveString + chr(byte(str2, j+1)-128);	
			j = j+1;
		} 
		else
		{
			receiveString = receiveString + chr(byte(str2, j));
		}
	}    
	while (byte(receiveString, 1) = 6)
	{
		receiveString = right(receiveString, len(receiveString)-1);
	}
	return (receiveString);
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH subscribe$
{
	wait(20)
	{
		if(xSubscribe)
		{
			xSubscribe = 0;
			for (i = 1 to 4)
			{
					makeString(sTempSend, "\x8E%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(((i-1)*6) + 1));  //REFERENCE
					tx$ = send(sTempSend) + "\x03\x03\x03\x03";
					processlogic();
					makeString(sTempSend, "\x8E%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(((i-1)*6) + 2));  //ATTACK
					tx$ = send(sTempSend) + "\x03\x03\x03\x03";
					processlogic();
					makeString(sTempSend, "\x8E%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(((i-1)*6) + 3));  //RELEASE
					tx$ = send(sTempSend) + "\x03\x03\x03\x03";
					processlogic();
					makeString(sTempSend, "\x8E%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(((i-1)*6) + 4));  //GAIN
					tx$ = send(sTempSend) + "\x03\x03\x03\x03";
					processlogic();
					makeString(sTempSend, "\x89%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(((i-1)*6) + 5));  //PHANTOM SWITCH
					tx$ = send(sTempSend) + "\x03\x03\x03\x03";
					processlogic();
					makeString(sTempSend, "\x89%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(208+(i-1)));  //MUTE
					tx$ = send(sTempSend) + "\x03\x03\x03\x03";
					processlogic();
			}
			subscribe = 1;
			xSubscribe = 1;
		}
	}
}

PUSH unSubscribe$
{
    if(xSubscribe)
	{
		xSubscribe = 0;
		for (i = 1 to 4)
		{
			makeString(sTempSend, "\x8F%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(((i-1)*6) + 1));  //REFERENCE
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
			makeString(sTempSend, "\x8F%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(((i-1)*6) + 2));  //ATTACK
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
			makeString(sTempSend, "\x8F%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(((i-1)*6) + 3));  //RELEASE
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
			makeString(sTempSend, "\x8F%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(((i-1)*6) + 4));  //GAIN
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
			makeString(sTempSend, "\x8A%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(((i-1)*6) + 5));  //PHANTOM SWITCH
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
			makeString(sTempSend, "\x8A%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(208+(i-1)));  //MUTE
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
		}
		subscribe = 0;
		xSubscribe = 1;
	}
}

PUSH meter_subscribe$
{
	wait(20)
	{
		for (i = 1 to 4)
		{
			makeString(sTempSend, "\x8E%s\x03\x00\x00%s\x00%s\x00\x00%s%s", sNode, chr(card$), chr(((i-1)*6) + 0), chr(high(meterRate$)), chr(low(meterRate$)));  //METER     chr(card$)
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
		}
		meter_subscribe = meter_subscribe$;
	}
}

RELEASE meter_subscribe$
{
	for (i = 1 to 4)
	{
		makeString(sTempSend, "\x8F%s\x03\x00\x00%s\x00%s\x00\x00%s%s", sNode, chr(card$), chr(((i-1)*6) + 0), chr(high(meterRate$)), chr(low(meterRate$)));  //METER    chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
	meter_subscribe = meter_subscribe$;
}

CHANGE channel_1_reference$
{
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 1;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_1_reference$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_1_reference$;
		channel_1_reference_fb$ = volumeInput[stateVarValue];
		makeString(sTempSend, "\x8D%s\x03\x00\x00%s\x00%s%s", sNode, chr(card$), chr(stateVarValue), iToVolumePercent(channel_1_reference$));    // chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

CHANGE channel_1_attack$
{
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 2;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_1_attack$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_1_attack$;
		channel_1_attack_fb$ = volumeInput[stateVarValue];
		makeString(sTempSend, "\x8D%s\x03\x00\x00%s\x00%s%s", sNode, chr(card$), chr(stateVarValue), iToVolumePercent(channel_1_attack$));    // chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

CHANGE channel_1_release$
{
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 3;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_1_release$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_1_release$;
		channel_1_release_fb$ = volumeInput[stateVarValue];
		makeString(sTempSend, "\x8D%s\x03\x00\x00%s\x00%s%s", sNode, chr(card$), chr(stateVarValue), iToVolumePercent(channel_1_release$));    // chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

CHANGE channel_1_gain$
{
	//xValue = getLastModifiedArrayIndex();
	if(xOKGain1)
	{
		xOKGain1 = 0;
	    stateVarValue = 4;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

		if(channel_1_gain$ <> volumeInput[stateVarValue])
		{
			volumeInput[stateVarValue] = channel_1_gain$;
			channel_1_gain_fb$ = volumeInput[stateVarValue];
			makeString(sTempSend, "\x8D%s\x03\x00\x00%s\x00%s%s", sNode, chr(card$), chr(stateVarValue), iToVolumePercent(channel_1_gain$));    // chr(card$)
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		}
		xOKGain1 = 1;
	}
}

CHANGE channel_2_reference$
{
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 7;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_2_reference$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_2_reference$;
		channel_2_reference_fb$ = volumeInput[stateVarValue];
		makeString(sTempSend, "\x8D%s\x03\x00\x00%s\x00%s%s", sNode, chr(card$), chr(stateVarValue), iToVolumePercent(channel_2_reference$));    // chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}  

CHANGE channel_2_attack$
{
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 8;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_2_attack$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_2_attack$;
		channel_2_attack_fb$ = volumeInput[stateVarValue];
		makeString(sTempSend, "\x8D%s\x03\x00\x00%s\x00%s%s", sNode, chr(card$), chr(stateVarValue), iToVolumePercent(channel_2_attack$));    // chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

CHANGE channel_2_release$
{
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 9;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_2_release$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_2_release$;
		channel_2_release_fb$ = volumeInput[stateVarValue];
		makeString(sTempSend, "\x8D%s\x03\x00\x00%s\x00%s%s", sNode, chr(card$), chr(stateVarValue), iToVolumePercent(channel_2_release$));    // chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

CHANGE channel_2_gain$
{
	if(xOKGain2)
	{
		xOKGain2 = 0;
		//xValue = getLastModifiedArrayIndex();
	    stateVarValue = 10;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

		if(channel_2_gain$ <> volumeInput[stateVarValue])
		{
			volumeInput[stateVarValue] = channel_2_gain$;
			channel_2_gain_fb$ = volumeInput[stateVarValue];
			makeString(sTempSend, "\x8D%s\x03\x00\x00%s\x00%s%s", sNode, chr(card$), chr(stateVarValue), iToVolumePercent(channel_2_gain$));    // chr(card$)
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		}
		xOKGain2 = 1;
	}
}

CHANGE channel_3_reference$
{
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 13;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_3_reference$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_3_reference$;
		channel_3_reference_fb$ = volumeInput[stateVarValue];
		makeString(sTempSend, "\x8D%s\x03\x00\x00%s\x00%s%s", sNode, chr(card$), chr(stateVarValue), iToVolumePercent(channel_3_reference$));    // chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

CHANGE channel_3_attack$
{
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 14;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_3_attack$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_3_attack$;
		channel_3_attack_fb$ = volumeInput[stateVarValue];
		makeString(sTempSend, "\x8D%s\x03\x00\x00%s\x00%s%s", sNode, chr(card$), chr(stateVarValue), iToVolumePercent(channel_3_attack$));    // chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

CHANGE channel_3_release$
{
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 15;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_3_release$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_3_release$;
		channel_3_release_fb$ = volumeInput[stateVarValue];
		makeString(sTempSend, "\x8D%s\x03\x00\x00%s\x00%s%s", sNode, chr(card$), chr(stateVarValue), iToVolumePercent(channel_3_release$));    // chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

CHANGE channel_3_gain$
{
	if(xOKGain3)
	{
		xOKGain3 = 0;
		//xValue = getLastModifiedArrayIndex();
	    stateVarValue = 16;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

		if(channel_3_gain$ <> volumeInput[stateVarValue])
		{
			volumeInput[stateVarValue] = channel_3_gain$;
			channel_3_gain_fb$ = volumeInput[stateVarValue];
			makeString(sTempSend, "\x8D%s\x03\x00\x00%s\x00%s%s", sNode, chr(card$), chr(stateVarValue), iToVolumePercent(channel_3_gain$));    // chr(card$)
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		}
		xOKGain3 = 1;
	}
}

CHANGE channel_4_reference$
{
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 19;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_4_reference$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_4_reference$;
		channel_4_reference_fb$ = volumeInput[stateVarValue];
		makeString(sTempSend, "\x8D%s\x03\x00\x00%s\x00%s%s", sNode, chr(card$), chr(stateVarValue), iToVolumePercent(channel_4_reference$));    // chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

CHANGE channel_4_attack$
{
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 20;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_4_attack$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_4_attack$;
		channel_4_attack_fb$ = volumeInput[stateVarValue];
		makeString(sTempSend, "\x8D%s\x03\x00\x00%s\x00%s%s", sNode, chr(card$), chr(stateVarValue), iToVolumePercent(channel_4_attack$));    // chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

CHANGE channel_4_release$
{
	//xValue = getLastModifiedArrayIndex();
    stateVarValue = 21;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

	if(channel_4_release$ <> volumeInput[stateVarValue])
	{
		volumeInput[stateVarValue] = channel_4_release$;
		channel_4_release_fb$ = volumeInput[stateVarValue];
		makeString(sTempSend, "\x8D%s\x03\x00\x00%s\x00%s%s", sNode, chr(card$), chr(stateVarValue), iToVolumePercent(channel_4_release$));    // chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
	}
}

CHANGE channel_4_gain$
{
	if(xOKGain4)
	{
		xOKGain4 = 0;
		//xValue = getLastModifiedArrayIndex();
	    stateVarValue = 22;//(((xValue-1)/5) * 6) + ((xValue-1) MOD 5);

		if(channel_4_gain$ <> volumeInput[stateVarValue])
		{
			volumeInput[stateVarValue] = channel_4_gain$;
			channel_4_gain_fb$ = volumeInput[stateVarValue];
			makeString(sTempSend, "\x8D%s\x03\x00\x00%s\x00%s%s", sNode, chr(card$), chr(stateVarValue), iToVolumePercent(channel_4_gain$));    // chr(card$)
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		}
		xOKGain4 = 1;
	}
}

PUSH channel_1_phantomSwitchOn$
{
	//xPhantom = getLastModifiedArrayIndex();
	stateVarPhantom = 5;//((xPhantom-1) * 6) + 5;
	makeString(sTempSend, "\x88%s\x03\x00\x00%s\x00%s\x00\x00\x00\x01", sNode, chr(card$), chr(stateVarPhantom));// chr(card$)
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH   chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH channel_1_phantomSwitchOff$
{
	//xPhantom = getLastModifiedArrayIndex();
	stateVarPhantom = 5;//((xPhantom-5) * 6) + 5;
	makeString(sTempSend, "\x88%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH    chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH channel_2_phantomSwitchOn$
{
	//xPhantom = getLastModifiedArrayIndex();
	stateVarPhantom = 11;//((xPhantom-1) * 6) + 5;
	makeString(sTempSend, "\x88%s\x03\x00\x00%s\x00%s\x00\x00\x00\x01", sNode, chr(card$), chr(stateVarPhantom));// chr(card$)
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH   chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH channel_2_phantomSwitchOff$
{
	//xPhantom = getLastModifiedArrayIndex();
	stateVarPhantom = 11;//((xPhantom-5) * 6) + 5;
	makeString(sTempSend, "\x88%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH    chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH channel_3_phantomSwitchOn$
{
	//xPhantom = getLastModifiedArrayIndex();
	stateVarPhantom = 17;//((xPhantom-1) * 6) + 5;
	makeString(sTempSend, "\x88%s\x03\x00\x00%s\x00%s\x00\x00\x00\x01", sNode, chr(card$), chr(stateVarPhantom));// chr(card$)
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH   chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH channel_3_phantomSwitchOff$
{
	//xPhantom = getLastModifiedArrayIndex();
	stateVarPhantom = 17;//((xPhantom-5) * 6) + 5;
	makeString(sTempSend, "\x88%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH    chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH channel_4_phantomSwitchOn$
{
	//xPhantom = getLastModifiedArrayIndex();
	stateVarPhantom = 23;//((xPhantom-1) * 6) + 5;
	makeString(sTempSend, "\x88%s\x03\x00\x00%s\x00%s\x00\x00\x00\x01", sNode, chr(card$), chr(stateVarPhantom));// chr(card$)
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH   chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH channel_4_phantomSwitchOff$
{
	//xPhantom = getLastModifiedArrayIndex();
	stateVarPhantom = 23;//((xPhantom-5) * 6) + 5;
	makeString(sTempSend, "\x88%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03\x00\x00%s\x00%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //PHANTOM SWITCH    chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH channel_1_muteOn$
{
	stateVarPhantom = 208;
	makeString(sTempSend, "\x88%s\x03\x00\x00%s\x07%s\x00\x00\x00\x01", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH channel_1_muteOff$
{
	stateVarPhantom = 208;
	makeString(sTempSend, "\x88%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH channel_1_muteToggle$
{
	stateVarPhantom = 208;
	if(channel_1_mute_fb$)
	{
		makeString(sTempSend, "\x88%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";

		if(subscribe)
		{
			makeString(sTempSend, "\x89%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
		}
	}
	else
	{
		makeString(sTempSend, "\x88%s\x03\x00\x00%s\x07%s\x00\x00\x00\x01", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";

		if(subscribe)
		{
			makeString(sTempSend, "\x89%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
		}
	}
}

PUSH channel_2_muteOn$
{
	stateVarPhantom = 209;
	makeString(sTempSend, "\x88%s\x03\x00\x00%s\x07%s\x00\x00\x00\x01", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH channel_2_muteOff$
{     
	stateVarPhantom = 209;
	makeString(sTempSend, "\x88%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)	
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH channel_2_muteToggle$
{       
	stateVarPhantom = 209; 
	if(channel_2_mute_fb$)
	{
		makeString(sTempSend, "\x88%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)	
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";

		if(subscribe)
		{
			makeString(sTempSend, "\x89%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
		}
	} 
	else
	{
		makeString(sTempSend, "\x88%s\x03\x00\x00%s\x07%s\x00\x00\x00\x01", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)	
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";

		if(subscribe)
		{
			makeString(sTempSend, "\x89%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
		}
	}
}

PUSH channel_3_muteOn$
{        
	stateVarPhantom = 210;
	makeString(sTempSend, "\x88%s\x03\x00\x00%s\x07%s\x00\x00\x00\x01", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)	
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}

}

PUSH channel_3_muteOff$
{     
	stateVarPhantom = 210;
	makeString(sTempSend, "\x88%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)	
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH channel_3_muteToggle$
{     
	stateVarPhantom = 210; 
	if(channel_3_mute_fb$)
	{
		makeString(sTempSend, "\x88%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)	
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";

		if(subscribe)
		{
			makeString(sTempSend, "\x89%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
		}
	} 
	else
	{
		makeString(sTempSend, "\x88%s\x03\x00\x00%s\x07%s\x00\x00\x00\x01", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)	
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";

		if(subscribe)
		{
			makeString(sTempSend, "\x89%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
		}
	}
}

PUSH channel_4_muteOn$
{       
	stateVarPhantom = 211;
	makeString(sTempSend, "\x88%s\x03\x00\x00%s\x07%s\x00\x00\x00\x01", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)	
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH channel_4_muteOff$
{     
	stateVarPhantom = 211;
	makeString(sTempSend, "\x88%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)	
	tx$ = send(sTempSend) + "\x03\x03\x03\x03";

	if(subscribe)
	{
		makeString(sTempSend, "\x89%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";
		processlogic();
	}
}

PUSH channel_4_muteToggle$
{    
	stateVarPhantom = 211; 
	if(channel_4_mute_fb$)
	{
		makeString(sTempSend, "\x88%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)	
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";

		if(subscribe)
		{
			makeString(sTempSend, "\x89%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
		}
	} 
	else
	{
		makeString(sTempSend, "\x88%s\x03\x00\x00%s\x07%s\x00\x00\x00\x01", sNode, chr(card$), chr(stateVarPhantom));//	chr(card$)	
		tx$ = send(sTempSend) + "\x03\x03\x03\x03";

		if(subscribe)
		{
			makeString(sTempSend, "\x89%s\x03\x00\x00%s\x07%s\x00\x00\x00\x00", sNode, chr(card$), chr(stateVarPhantom));  //MUTE    chr(card$)
			tx$ = send(sTempSend) + "\x03\x03\x03\x03";
			processlogic();
		}
	}
}

function ProcessRxMessage(string paramData)
{
	integer first;
	integer second;
	if(find("Send Name", paramData) > 0)
	{
		iTempNum = atoi(paramData);
		iMarker1 = find("Node ", paramData) + 5;
		sNode = mid(paramData, iMarker1, 2);
		sCard = fPad(chr(Card$));
		makestring(tx$, "Send Name%d = %s\x03\x03\x03\x03\x03", iTempNum, sCard);
	}
	else if((mid(paramData, 7, 3) = "\x00\x00\x00") || (mid(paramData, 7, len(sCard)) = sCard))
	{             
		paramData = fUnpad(paramData);
		stateVarReceive = wordToI(paramData, 9, 10);
		if(stateVarReceive = 2000 || stateVarReceive = 2001 || stateVarReceive = 2002 || stateVarReceive = 2003)
		{
			cswitch(stateVarReceive)
			{
				CASE(2000):
				{
				    channel_1_mute_fb$ = byte(paramData, 14);
					break;
				}  
				CASE(2001):
				{
				    channel_2_mute_fb$ = byte(paramData, 14);
					break;
				}
				CASE(2002):
				{
				    channel_3_mute_fb$ = byte(paramData, 14);
					break;
				}
				CASE(2003):
				{
				    channel_4_mute_fb$ = byte(paramData, 14);
					break;
				}
			}
		}
		else if ((stateVarReceive MOD 6) = 5)
		{               
			if (byte(paramData, 14))
			{
				first =  (stateVarReceive/6)+5;
				second = (stateVarReceive/6)+1;
				switch(first)
				{
					CASE (1): channel_1_phantomSwitchOn_fb$ = 0;
					CASE (2): channel_2_phantomSwitchOn_fb$ = 0;
					CASE (3): channel_3_phantomSwitchOn_fb$ = 0;
					CASE (4): channel_4_phantomSwitchOn_fb$ = 0;
					CASE (5): channel_1_phantomSwitchOff_fb$ = 0;
					CASE (6): channel_2_phantomSwitchOff_fb$ = 0;
					CASE (7): channel_3_phantomSwitchOff_fb$ = 0;
					CASE (8): channel_4_phantomSwitchOff_fb$ = 0;
				} 
				switch(second)
				{
					CASE (1): channel_1_phantomSwitchOn_fb$ = 1;
					CASE (2): channel_2_phantomSwitchOn_fb$ = 1;
					CASE (3): channel_3_phantomSwitchOn_fb$ = 1;
					CASE (4): channel_4_phantomSwitchOn_fb$ = 1;
					CASE (5): channel_1_phantomSwitchOff_fb$ = 1;
					CASE (6): channel_2_phantomSwitchOff_fb$ = 1;
					CASE (7): channel_3_phantomSwitchOff_fb$ = 1;
					CASE (8): channel_4_phantomSwitchOff_fb$ = 1;
				}                                              
			}
			else
			{    
				first =  (stateVarReceive/6)+1;
				second = (stateVarReceive/6)+5;
				switch(first)
				{
					CASE (1): channel_1_phantomSwitchOn_fb$ = 0;
					CASE (2): channel_2_phantomSwitchOn_fb$ = 0;
					CASE (3): channel_3_phantomSwitchOn_fb$ = 0;
					CASE (4): channel_4_phantomSwitchOn_fb$ = 0;
					CASE (5): channel_1_phantomSwitchOff_fb$ = 0;
					CASE (6): channel_2_phantomSwitchOff_fb$ = 0;
					CASE (7): channel_3_phantomSwitchOff_fb$ = 0;
					CASE (8): channel_4_phantomSwitchOff_fb$ = 0;
				} 
				switch(second)
				{
					CASE (1): channel_1_phantomSwitchOn_fb$ = 1;
					CASE (2): channel_2_phantomSwitchOn_fb$ = 1;
					CASE (3): channel_3_phantomSwitchOn_fb$ = 1;
					CASE (4): channel_4_phantomSwitchOn_fb$ = 1;
					CASE (5): channel_1_phantomSwitchOff_fb$ = 1;
					CASE (6): channel_2_phantomSwitchOff_fb$ = 1;
					CASE (7): channel_3_phantomSwitchOff_fb$ = 1;
					CASE (8): channel_4_phantomSwitchOff_fb$ = 1;
				} 
			}
		}
		else
		{
			//stateVarReceive = ((stateVarReceive / 6) * 5) + ((stateVarReceive MOD 6) + 1)-1;
			volumeInput[stateVarReceive] = volumePercentToI(mid(paramData, 11, 4));
			switch(stateVarReceive)
			{
				case(0): channel_1_meter_fb$ = volumeInput[stateVarReceive];//Ch1.Meter
				case(1): channel_1_reference_fb$ = volumeInput[stateVarReceive]; //Ch1. Reference
				case(2): channel_1_attack_fb$ = volumeInput[stateVarReceive]; //ch1. Attack
				case(3): channel_1_release_fb$ = volumeInput[stateVarReceive]; //Ch1. Release
				case(4): channel_1_gain_fb$ = volumeInput[stateVarReceive]; //Ch1. Gain
				//case(5): value_fb$[6] = volumeInput[stateVarReceive]; //Ch1. Phantom
				case(6): channel_2_meter_fb$ = volumeInput[stateVarReceive];
				case(7): channel_2_reference_fb$ = volumeInput[stateVarReceive];
				case(8): channel_2_attack_fb$ = volumeInput[stateVarReceive];
				case(9): channel_2_release_fb$ = volumeInput[stateVarReceive];
				case(10): channel_2_gain_fb$ = volumeInput[stateVarReceive];
				//case(11): value_fb$[12] = volumeInput[stateVarReceive];
				case(12): channel_3_meter_fb$ = volumeInput[stateVarReceive];
				case(13): channel_3_reference_fb$ = volumeInput[stateVarReceive];
				case(14): channel_3_attack_fb$ = volumeInput[stateVarReceive];
				case(15): channel_3_release_fb$ = volumeInput[stateVarReceive];
				case(16): channel_3_gain_fb$ = volumeInput[stateVarReceive];
				//case(17): value_fb$[18] = volumeInput[stateVarReceive];
				case(18): channel_4_meter_fb$ = volumeInput[stateVarReceive];
				case(19): channel_4_reference_fb$ = volumeInput[stateVarReceive];
				case(20): channel_4_attack_fb$ = volumeInput[stateVarReceive];
				case(21): channel_4_release_fb$ = volumeInput[stateVarReceive];
				case(22): channel_4_gain_fb$ = volumeInput[stateVarReceive];
				//case(23): value_fb$[24] = volumeInput[stateVarReceive];
				}//switch
		}//else
	}
}
#if_series3
THREADSAFE CHANGE rx$
{  
	while(1)
	{
		try
		{
			tempString = "";
			tempString = gather("\x03\x03\x03\x03\x03", rx$);
			tempString = left(tempString, len(tempString) - 4);
			ProcessRxMessage(tempString);
		}
		catch
		{
			generateusernotice("BSS SoundWeb London Analog Input Card %d Error: %s", card$, getexceptionmessage());
		}
	}
}
#else
integer semaphore;
THREADSAFE CHANGE rx$
{  
	if(semaphore = 0)
	{
		semaphore = 1;
		while(1)
		{
			tempString = "";
			tempString = gather("\x03\x03\x03\x03\x03", rx$);
			tempString = left(tempString, len(tempString) - 4);
			ProcessRxMessage(tempString);
		}
		semaphore = 0;
	}
}
#endif
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	INTEGER i;
	subscribe = 0;
	xSubscribe = 1;
	xOKGain1 = 1;
	xOKGain2 = 1;
	xOKGain3 = 1;
	xOKGain4 = 1;
#if_series2
semaphore = 0;
#endif
}
