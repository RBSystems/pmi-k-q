/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:	Crestron Electronics, Inc.
System Name:
System Number:
Programmer:		PAC
Comments:
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "BSS SoundWeb London Parameter Presets Drive v5.4"
// #HINT ""
#DEFINE_CONSTANT MAXPRESETS 255
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING

#HELP_BEGIN 
	version 5.4
BSS Soundweb London

This modules controls the "Parameter presets" of a Soundweb London device.
As "Parameter presets" don't have an object Id, there's no need for it in this module.

The TX of this module should be connected directly to the RS232 or IP comm port.  Do
NOT connect this to the NODE module.

You cannot subscribe to presets

Use Alt+ to expand the signals to accomodate the number of presets needed.

INPUTS 
------
recallPreset$[X]: pulse to recall preset X

OUTPUTS
-------
tx:               connected directly to the RS232 or IP comm port
#HELP_END
/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT recallPreset$_0,recallPreset$[MAXPRESETS];

STRING_OUTPUT tx$;
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER x;
STRING returnString[4]; 
STRING command[80];

INTEGER checksum;                   
STRING sendString[100];
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function send(STRING str)
{        
	INTEGER fiB;
	checksum = 0;
	sendString = "";
	for (fiB = 1 to len(str))                                                               
	{             
		checksum = checksum ^ byte(str, fiB);
		if (byte(str, fiB) = 2 || byte(str, fiB) = 3 || byte(str, fiB) = 6 || byte(str, fiB) = 21 || byte(str, fiB) = 27)
		{     
			makeString(sendString, "%s\x1B%s", sendString, chr(byte(str, fiB) + 128));
		}               
		else
		{
			makeString(sendString, "%s%s", sendString, chr(byte(str, fiB)));
		}
	}                  
	if (checksum = 2 || checksum = 3 || checksum = 6 || checksum = 21 || checksum = 27)
	{
		makeString(tx$, "\x02%s\x1B%s\x03", sendString, chr(checksum+128));
	}
	else
	{                                      
		makeString(tx$, "\x02%s%s\x03", sendString, chr(checksum));
	}                                      
}

String_Function iToString(INTEGER int, INTEGER size)
{           
	INTEGER fiC;
	returnString = "";      
	if (int <= 255)
	{                   
		for (fiC = 1 to size-1)
		{
			returnString = returnString + "\x00";
		}
		returnString = returnString + chr(int);
	}
	else 
	{
		for (fiC = 1 to size-2)
		{
			returnString = returnString + "\x00";
		}                                        
		returnString = returnString + chr(high(int)) + chr(low(int));
	} 	
    Return (returnString);
}
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH recallPreset$_0
{
 	makeString(command, "\x8C%s", iToString(0, 4));
	call send(command);
}

PUSH recallPreset$
{
	x = getLastModifiedArrayIndex();
	
	makeString(command, "\x8C%s", iToString(x, 4));
	call send(command);
}
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // WaitForInitializationComplete();
}
*/
